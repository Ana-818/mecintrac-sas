---
import Layout from "@/layouts/Layout.astro"
import projects from "@/data/projects.json"
import { Image } from "astro:assets"
const projectImage = import.meta.glob('/src/assets/images/hero/*.{jpg,png,jpeg,webp}', { eager: true }) as Record<string, { default: string }>;

// Generar un conjunto único de etiquetas
const uniqueTags = Array.from(new Set(projects.map(project => project.tag)));
---

<Layout title="Proyectos">
  <div class="flex flex-col items-center section-container">
    <h1 class="text-5xl font-bold tracking-wider text-blue text-center">Proyectos</h1>
    <p class="text-lg text-center max-w-2xl mt-2">En Mecintrac, desarrollamos proyectos en diversas industrias, destacando nuestro compromiso con la calidad y la eficiencia en cada solución entregada.</p>
    
    <div class="flex flex-wrap justify-center max-w-2xl mt-4">
      <a href="?tag=Todas" class="m-2 px-4 py-2 text-blue border-blue border-2 rounded-full">Todas</a>
      {uniqueTags.map(tag => (
        <a href={`?tag=${tag}`} class="m-2 px-4 py-2 text-blue border-blue border-2 rounded-full">{tag}</a>
      ))}
    </div>

    <div id="projects-container" class="flex flex-wrap justify-center mt-8 max-w-5xl">
      {projects.map((project, index) => (
        <div class="project-item m-4 flex flex-col items-start" data-index={index}>
          <Image 
            src={projectImage[project.image].default} 
            alt={project.tag} 
            width={400}
            inferSize
            class="max-w-[300px] max-h-[300px] object-cover rounded-lg" 
          />
          <span class="m-2 px-4 py-2 text-blue border-blue border-2 rounded-full select-none">{project.tag}</span>
        </div>
      ))}
    </div>

    <!-- Controles de paginación -->
    <div class="flex justify-center mt-4">
      <button id="prev-btn" class="m-2 px-4 py-2 text-blue border-blue border-2 rounded-full">&lt;</button>
      <button id="next-btn" class="m-2 px-4 py-2 text-blue border-blue border-2 rounded-full">&gt;</button>
    </div>
  </div>

  <script>
    const projectsPerPage = 6; // Number of projects per page
    const totalPages = Math.ceil(document.querySelectorAll('.project-item').length / projectsPerPage);
    let currentPage = 1;

    function updateProjectsVisibility() {
      const projects = document.querySelectorAll('.project-item');
      projects.forEach((project, index) => {
        (project as HTMLElement).style.display = (index >= (currentPage - 1) * projectsPerPage && index < currentPage * projectsPerPage) ? '' : 'none';
      });
    }
    function updatePaginationControls() {
      const prevBtn = document.getElementById('prev-btn') as HTMLButtonElement;
      const nextBtn = document.getElementById('next-btn') as HTMLButtonElement;
      if (prevBtn && nextBtn) {
        prevBtn.disabled = currentPage === 1;
        nextBtn.disabled = currentPage === totalPages;
      }
    }

    const prevBtn = document.getElementById('prev-btn');
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        updateProjectsVisibility();
        updatePaginationControls();
      }
    });
    }

    const nextBtn = document.getElementById('next-btn');
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        if (currentPage < totalPages) {
          currentPage++;
          updateProjectsVisibility();
          updatePaginationControls();
      }
    });
    }

    // Initial setup
    updateProjectsVisibility();
    updatePaginationControls();
  </script>
</Layout>